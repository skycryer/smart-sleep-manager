<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN [
<!ENTITY name "smart.sleep.manager">
<!ENTITY displayname "Smart Sleep Manager">
<!ENTITY author "SkyCryer">
<!ENTITY version "2025.10.09.30">
<!ENTITY launch "Settings/SmartSleepSettings">
<!ENTITY gitURL "https://github.com/skycryer/smart-sleep-manager/raw/main">
<!ENTITY pluginURL "&gitURL;/smart.sleep.manager.plg">
]>

<PLUGIN name="&name;" displayname="&displayname;" author="&author;" version="&version;" launch="&launch;" pluginURL="&pluginURL;" min="6.12.0">

<!--
PLUGIN DESCRIPTION
Smart Sleep Manager

Automated sleep management for your Unraid server with intelligent monitoring and notifications. Monitors disk activity and network traffic to determine when it's safe to put the server to sleep. Includes configurable idle timers, disk monitoring, MQTT sensors for Home Assistant, and Wake-on-LAN support for seamless operation.

Features:
• Intelligent disk activity monitoring
• Network traffic monitoring  
• MQTT sensor publishing for Home Assistant integration
• Telegram notifications for sleep events
• Wake-on-LAN support with automatic configuration
• Configurable idle timers and thresholds
• Compatible with Dynamix S3 sleep
• Web-based configuration interface

MQTT Sensors:
• unraid/smart-sleep/status - Current status (standby/waiting/sleeping/blocked)
• unraid/smart-sleep/uptime - System uptime in seconds
• unraid/smart-sleep/network_rate - Network traffic in bytes/second  
• unraid/smart-sleep/active_disks - Number of active disks
• unraid/smart-sleep/sleep_timer - Minutes until sleep possible
• unraid/smart-sleep/state - Combined JSON state for Home Assistant
-->

<CHANGES>
###2025.10.09.30
- Fixed "Run Sleep Check Now" button functionality
- Added PHP wrapper (run_sleep_check.php) for manual sleep check execution
- Added mosquitto-clients installation check for MQTT support  
- Improved JavaScript error handling and output logging
- Manual sleep check now properly executes and shows output
- MQTT sensors should now work when button is pressed

###2025.10.09.29
- PRODUCTION READY: MQTT configuration now fully functional  
- Removed debug output for clean user experience
- Faster redirect (1.5s) after successful configuration save
- Configuration persistence confirmed working
- MQTT sensors ready for Home Assistant integration

###2025.10.09.28
- Fixed form submission - direct POST to update.sleep.php
- Bypassed Unraid's update.php system that wasn't executing our handler
- Added auto-redirect back to settings after save
- This should finally fix the config persistence issue

###2025.10.09.27
- Added extensive debugging for config save troubleshooting
- Enhanced error reporting and POST data logging
- Added config file write status checks
- Added ignore_disks field for full compatibility
- Debug version to identify MQTT config persistence issue

###2025.10.09.26
- Fixed MQTT configuration persistence issue
- Added automatic migration for existing configs without MQTT fields
- Enhanced config loading with fallback defaults
- Added debug logging for configuration troubleshooting
- MQTT settings now properly persist after Apply button

###2025.10.09.25
- Added MQTT support for real-time monitoring
- MQTT status updates sent on every sleep check cycle
- Configurable MQTT broker, username/password authentication
- Home Assistant integration friendly with JSON sensor data
- Additional sensors: uptime, network rate, active disks
- Backward compatible with existing Telegram notifications

###2025.10.09.24
- Production ready release with streamlined interface
- Cleaned up testing code and simplified configuration UI
- Essential sleep management functionality only
- Improved documentation and user experience

###2025.10.09
- Initial release with intelligent sleep management
- Array disk activity monitoring with configurable standby detection
- Network traffic monitoring with customizable thresholds  
- Telegram notification support for sleep events
- Wake-on-LAN configuration and post-wake Samba restart
- Compatible with Dynamix S3 sleep
- Web-based configuration interface with disk selection
</CHANGES>

<FILE Run="/bin/bash">
<INLINE>
echo "Installing Smart Sleep Manager..."
rm -rf /usr/local/emhttp/plugins/smart.sleep.manager
mkdir -p /usr/local/emhttp/plugins/smart.sleep.manager/include
mkdir -p /usr/local/emhttp/plugins/smart.sleep.manager/scripts
mkdir -p /usr/local/emhttp/plugins/smart.sleep.manager/icons
mkdir -p /usr/local/emhttp/plugins/smart.sleep.manager/images
mkdir -p /boot/config/plugins/smart.sleep.manager

# Install mosquitto-clients for MQTT support if not already installed
if ! command -v mosquitto_pub >/dev/null 2>&1; then
    echo "Installing mosquitto-clients for MQTT support..."
    if [ -f /etc/slackware-version ]; then
        # Try to install via slackpkg or download package
        echo "Note: mosquitto_pub not found. MQTT features will be disabled until mosquitto-clients is installed."
        echo "Install with: slackpkg install mosquitto or download mosquitto package manually"
    fi
fi

echo "Plugin directories created"
</INLINE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/smart.sleep.manager/default.cfg">
<URL>&gitURL;/default.cfg</URL>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/smart.sleep.manager/SmartSleepSettings.page">
<URL>&gitURL;/SmartSleepSettings.page</URL>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/smart.sleep.manager/SleepManager.php">
<URL>&gitURL;/SleepManager.php</URL>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/smart.sleep.manager/include/update.sleep.php">
<URL>&gitURL;/include/update.sleep.php</URL>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/smart.sleep.manager/include/run_sleep_check.php">
<URL>&gitURL;/include/run_sleep_check.php</URL>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/smart.sleep.manager/include/SleepMode.php">
<URL>&gitURL;/include/SleepMode.php</URL>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/smart.sleep.manager/include/debug_system.php">
<URL>&gitURL;/include/debug_system.php</URL>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/smart.sleep.manager/scripts/smart_sleep.sh" Mode="0755">
<URL>&gitURL;/scripts/smart_sleep.sh</URL>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/smart.sleep.manager/scripts/preRun" Mode="0755">
<URL>&gitURL;/scripts/preRun</URL>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/smart.sleep.manager/scripts/postRun" Mode="0755">
<URL>&gitURL;/scripts/postRun</URL>
</FILE>

<FILE Run="/bin/bash">
<INLINE>
echo "Configuring Smart Sleep Manager..."
if [ ! -f /boot/config/plugins/smart.sleep.manager/smart.sleep.manager.cfg ]; then
  cp /usr/local/emhttp/plugins/smart.sleep.manager/default.cfg /boot/config/plugins/smart.sleep.manager/smart.sleep.manager.cfg
  echo "Default configuration copied"
fi
chmod +x /usr/local/emhttp/plugins/smart.sleep.manager/scripts/smart_sleep.sh 2>/dev/null
chmod +x /usr/local/emhttp/plugins/smart.sleep.manager/scripts/preRun 2>/dev/null
chmod +x /usr/local/emhttp/plugins/smart.sleep.manager/scripts/postRun 2>/dev/null
echo "Permissions set"
CRONLINE="*/5 * * * * /usr/local/emhttp/plugins/smart.sleep.manager/scripts/smart_sleep.sh >/dev/null"
if ! crontab -l 2>/dev/null | grep -q "smart_sleep.sh"; then
  (crontab -l 2>/dev/null; echo "$CRONLINE") | crontab -
  echo "Cron job installed"
fi
echo "Smart Sleep Manager installed successfully!"
</INLINE>
</FILE>

<FILE Run="/bin/bash" Method="remove">
<INLINE>
echo "Removing Smart Sleep Manager..."
crontab -l 2>/dev/null | grep -v "smart_sleep.sh" | crontab - 2>/dev/null
rm -rf /usr/local/emhttp/plugins/smart.sleep.manager
echo "Smart Sleep Manager removed successfully!"
</INLINE>
</FILE>

</PLUGIN>
